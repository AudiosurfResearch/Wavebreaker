// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String
  steamid64       String   @unique
  steamid32       Int      @unique
  locationid      Int      @default(1)
  accountType     Int      @default(1) // 1 = regular, 2 = Moderator, 3 = Wavebreaker Team
  scores          Score[]
  shouts          Shout[]
  joinedAt        DateTime @default(now())
  avatarUrl       String
  avatarUrlMedium String
  avatarUrlSmall  String

  //pray this doesn't implode
  rivals      User[] @relation("friends")
  challengers User[] @relation("friends")
}

model Song {
  id     Int     @id @default(autoincrement())
  title  String
  artist String
  scores Score[]
  shouts Shout[]
}

model Score {
  id            Int      @id @default(autoincrement())
  userId        Int
  player        User     @relation(fields: [userId], references: [id])
  leagueId      Int
  trackShape    String
  xstats        String
  density       Int
  vehicleId     Int
  score         Int
  rideTime      DateTime @default(now()) //NOTE: When sending to the game, get it as UNIX time, divide by 1000 and Math.floor it
  feats         String
  songLength    Int
  goldThreshold Int
  iss           Int
  isj           Int
  playCount     Int      @default(1) //Total play count on this difficulty
  song          Song     @relation(fields: [songId], references: [id])
  songId        Int

  @@unique([userId, leagueId, songId])
}

model Shout {
  id          Int      @id @default(autoincrement())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  songId      Int
  song        Song     @relation(fields: [songId], references: [id])
  content     String
  timeCreated DateTime @default(now())
}
